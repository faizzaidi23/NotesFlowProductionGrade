<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/RepositoryImplementation/17_RemainderRepositoryImplementation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/RepositoryImplementation/17_RemainderRepositoryImplementation.kt" />
              <option name="originalContent" value="package com.example.noteflowproduction.RepositoryImplementation&#10;&#10;import com.example.noteflowproduction.Database.Note&#10;import com.example.noteflowproduction.Database.Reminder&#10;import com.example.noteflowproduction.Database.ReminderDao&#10;import com.example.noteflowproduction.Repositories.ReminderRepository&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class ReminderRepositoryImplementation(private val reminderDao: ReminderDao) : ReminderRepository {&#10;&#10;    //To get all the reminders&#10;    override fun getAllReminders(): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.showAllReminders()&#10;    }&#10;&#10;    //Add a reminder&#10;    override suspend fun addReminder(reminder: Reminder) {&#10;        reminderDao.addReminder(reminder = reminder)&#10;    }&#10;&#10;    //update a reminder&#10;    override suspend fun updateReminder(reminder: Reminder) {&#10;        reminderDao.updateReminder(reminder = reminder)&#10;    }&#10;&#10;    //delete a reminder&#10;    override suspend fun deleteReminder(reminder: Reminder) {&#10;        reminderDao.deleteReminder(reminder = reminder)&#10;    }&#10;&#10;    //get reminders for note&#10;    override fun getRemindersForNote(noteId: Int): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.getRemindersForNote(noteId = noteId)&#10;    }&#10;&#10;    //get reminders for tag&#10;    override fun getRemindersForTag(tagId: Int): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.getRemindersForTag(tagId = tagId)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.noteflowproduction.RepositoryImplementation&#10;&#10;import com.example.noteflowproduction.Database.Note&#10;import com.example.noteflowproduction.Database.Reminder&#10;import com.example.noteflowproduction.Database.ReminderDao&#10;import com.example.noteflowproduction.Repositories.ReminderRepository&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class ReminderRepositoryImplementation(private val reminderDao: ReminderDao) : ReminderRepository {&#10;&#10;    //To get all the reminders&#10;    override fun getAllReminders(): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.showAllReminders()&#10;    }&#10;&#10;    //Add a reminder&#10;    override suspend fun addReminder(reminder: Reminder) {&#10;        reminderDao.addReminder(reminder = reminder)&#10;    }&#10;&#10;    //update a reminder&#10;    override suspend fun updateReminder(reminder: Reminder) {&#10;        reminderDao.updateReminder(reminder = reminder)&#10;    }&#10;&#10;    //delete a reminder&#10;    override suspend fun deleteReminder(reminder: Reminder) {&#10;        reminderDao.deleteReminder(reminder = reminder)&#10;    }&#10;&#10;    //get reminders for note&#10;    override fun getRemindersForNote(noteId: Int): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.getRemindersForNote(noteId = noteId)&#10;    }&#10;&#10;    //get reminders for tag&#10;    override fun getRemindersForTag(tagId: Int): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.getRemindersForTag(tagId = tagId)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
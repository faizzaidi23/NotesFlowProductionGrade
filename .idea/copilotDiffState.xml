<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/MainActivity.kt" />
              <option name="originalContent" value="package com.example.noteflowproduction&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import com.example.noteflowproduction.ui.theme.NoteFlowProductionTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            NoteFlowProductionTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;&#10;                    Greeting(&#10;                        name = &quot;Android&quot;,&#10;                        modifier = Modifier.padding(innerPadding)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun Greeting(name: String, modifier: Modifier = Modifier) {&#10;    Text(&#10;        text = &quot;Hello $name!&quot;,&#10;        modifier = modifier&#10;    )&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    NoteFlowProductionTheme {&#10;        Greeting(&quot;Android&quot;)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.noteflowproduction&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.activity.viewModels&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.noteflowproduction.NavigationSetup.AppNavHost&#10;import com.example.noteflowproduction.ViewModels.NoteViewModel&#10;import com.example.noteflowproduction.ui.theme.NoteFlowProductionTheme&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    &#10;    private val noteViewModel: NoteViewModel by viewModels()&#10;    &#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            NoteFlowProductionTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    val navController = rememberNavController()&#10;                    AppNavHost(&#10;                        navController = navController,&#10;                        noteViewModel = noteViewModel&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/NavigationSetup/24_NavHost.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/NavigationSetup/24_NavHost.kt" />
              <option name="originalContent" value="package com.example.noteflowproduction.NavigationSetup&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.noteflowproduction.UserInterface.HomeScreen&#10;import com.example.noteflowproduction.ViewModels.NoteViewModel&#10;&#10;@Composable&#10;fun AppNavHost(&#10;    modifier:Modifier= Modifier,&#10;    navController: NavHostController= rememberNavController(),&#10;    startDestination:String= Screen.HomeScreen.route,&#10;    noteViewModel: NoteViewModel,&#10;&#10;){&#10;    NavHost(&#10;        modifier=modifier,&#10;        navController =navController,&#10;        startDestination = startDestination&#10;    ){&#10;&#10;        //For home screen&#10;      composable(&#10;          route=Screen.HomeScreen.route&#10;      ){&#10;          HomeScreen(navController=navController, viewModel = noteViewModel)&#10;      }&#10;&#10;&#10;        //Editor Screen&#10;      composable(route=Screen.EditorScreen.route){&#10;&#10;      }&#10;&#10;        //NoteDetail Screen&#10;        composable(&#10;           route= Screen.NoteDetailScreen.route&#10;        ){&#10;&#10;        }&#10;&#10;        //Folder Screen&#10;        composable(&#10;           route= Screen.FolderScreen.route&#10;        ){&#10;&#10;        }&#10;&#10;        //Tag Screen&#10;&#10;        composable(&#10;           route= Screen.TagScreen.route&#10;        ) {&#10;&#10;        }&#10;&#10;        //Search Screen&#10;&#10;        composable(&#10;          route=  Screen.SearchScreen.route&#10;        ) {&#10;&#10;        }&#10;&#10;&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.example.noteflowproduction.NavigationSetup&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import com.example.noteflowproduction.UserInterface.HomeScreen&#10;import com.example.noteflowproduction.UserInterface.NoteDetailScreen&#10;import com.example.noteflowproduction.ViewModels.NoteViewModel&#10;&#10;@Composable&#10;fun AppNavHost(&#10;    modifier:Modifier= Modifier,&#10;    navController: NavHostController= rememberNavController(),&#10;    startDestination:String= Screen.HomeScreen.route,&#10;    noteViewModel: NoteViewModel,&#10;&#10;){&#10;    NavHost(&#10;        modifier=modifier,&#10;        navController =navController,&#10;        startDestination = startDestination&#10;    ){&#10;&#10;        //For home screen&#10;      composable(&#10;          route=Screen.HomeScreen.route&#10;      ){&#10;          HomeScreen(navController=navController, viewModel = noteViewModel)&#10;      }&#10;&#10;&#10;        //Editor Screen&#10;      composable(route=Screen.EditorScreen.route){&#10;&#10;      }&#10;&#10;        //NoteDetail Screen&#10;        composable(&#10;           route= &quot;detail/{noteId}&quot;,&#10;            arguments = listOf(&#10;                navArgument(&quot;noteId&quot;) { type = NavType.IntType }&#10;            )&#10;        ){backStackEntry -&gt;&#10;            val noteId = backStackEntry.arguments?.getInt(&quot;noteId&quot;) ?: 0&#10;            NoteDetailScreen(&#10;                noteId = noteId,&#10;                onNavigateBack = { navController.popBackStack() },&#10;                viewModel = noteViewModel&#10;            )&#10;        }&#10;&#10;        //Folder Screen&#10;        composable(&#10;           route= Screen.FolderScreen.route&#10;        ){&#10;&#10;        }&#10;&#10;        //Tag Screen&#10;&#10;        composable(&#10;           route= Screen.TagScreen.route&#10;        ) {&#10;&#10;        }&#10;&#10;        //Search Screen&#10;&#10;        composable(&#10;          route=  Screen.SearchScreen.route&#10;        ) {&#10;&#10;        }&#10;&#10;&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/RepositoryImplementation/17_RemainderRepositoryImplementation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/RepositoryImplementation/17_RemainderRepositoryImplementation.kt" />
              <option name="originalContent" value="package com.example.noteflowproduction.RepositoryImplementation&#10;&#10;import com.example.noteflowproduction.Database.Note&#10;import com.example.noteflowproduction.Database.Reminder&#10;import com.example.noteflowproduction.Database.ReminderDao&#10;import com.example.noteflowproduction.Repositories.ReminderRepository&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class ReminderRepositoryImplementation(private val reminderDao: ReminderDao) : ReminderRepository {&#10;&#10;    //To get all the reminders&#10;    override fun getAllReminders(): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.showAllReminders()&#10;    }&#10;&#10;    //Add a reminder&#10;    override suspend fun addReminder(reminder: Reminder) {&#10;        reminderDao.addReminder(reminder = reminder)&#10;    }&#10;&#10;    //update a reminder&#10;    override suspend fun updateReminder(reminder: Reminder) {&#10;        reminderDao.updateReminder(reminder = reminder)&#10;    }&#10;&#10;    //delete a reminder&#10;    override suspend fun deleteReminder(reminder: Reminder) {&#10;        reminderDao.deleteReminder(reminder = reminder)&#10;    }&#10;&#10;    //get reminders for note&#10;    override fun getRemindersForNote(noteId: Int): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.getRemindersForNote(noteId = noteId)&#10;    }&#10;&#10;    //get reminders for tag&#10;    override fun getRemindersForTag(tagId: Int): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.getRemindersForTag(tagId = tagId)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.noteflowproduction.RepositoryImplementation&#10;&#10;import com.example.noteflowproduction.Database.Note&#10;import com.example.noteflowproduction.Database.Reminder&#10;import com.example.noteflowproduction.Database.ReminderDao&#10;import com.example.noteflowproduction.Repositories.ReminderRepository&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class ReminderRepositoryImplementation(private val reminderDao: ReminderDao) : ReminderRepository {&#10;&#10;    //To get all the reminders&#10;    override fun getAllReminders(): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.showAllReminders()&#10;    }&#10;&#10;    //Add a reminder&#10;    override suspend fun addReminder(reminder: Reminder) {&#10;        reminderDao.addReminder(reminder = reminder)&#10;    }&#10;&#10;    //update a reminder&#10;    override suspend fun updateReminder(reminder: Reminder) {&#10;        reminderDao.updateReminder(reminder = reminder)&#10;    }&#10;&#10;    //delete a reminder&#10;    override suspend fun deleteReminder(reminder: Reminder) {&#10;        reminderDao.deleteReminder(reminder = reminder)&#10;    }&#10;&#10;    //get reminders for note&#10;    override fun getRemindersForNote(noteId: Int): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.getRemindersForNote(noteId = noteId)&#10;    }&#10;&#10;    //get reminders for tag&#10;    override fun getRemindersForTag(tagId: Int): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.getRemindersForTag(tagId = tagId)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/UserInterface/25_HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/UserInterface/25_HomeScreen.kt" />
              <option name="originalContent" value="package com.example.noteflowproduction.UserInterface&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.foundation.lazy.grid.items&#10;import com.example.noteflowproduction.NavigationSetup.Screen&#10;&#10;import com.example.noteflowproduction.ViewModels.NoteViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HomeScreen(navController: NavController,viewModel: NoteViewModel){&#10;&#10;    val notesList by viewModel.allNotes.collectAsState()&#10;&#10;    Scaffold(&#10;        modifier=Modifier.fillMaxSize(),&#10;        topBar = {&#10;            TopAppBar(&#10;                title={Text(text=&quot;NotesFlow&quot;,fontWeight=FontWeight.ExtraBold,fontSize=36.sp)},&#10;                modifier=Modifier.fillMaxSize()&#10;&#10;            )&#10;        }&#10;    ) { internalPadding-&gt;&#10;        LazyVerticalGrid(&#10;            modifier=Modifier.padding(internalPadding),&#10;            columns = GridCells.Fixed(2),&#10;            contentPadding= PaddingValues(8.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ){&#10;            items(notesList){&#10;                note-&gt;&#10;                NoteCardComponent(&#10;                    title=note.title,&#10;                    content = note.content,&#10;                    createdDate = note.createdDate,&#10;                    image = &quot;&quot;,&#10;                    navigateToNoteDetail ={&#10;                        noteId-&gt;&#10;                        navController.navigate(Screen.NoteDetailScreen.route +&quot;/$noteId&quot;)&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.noteflowproduction.UserInterface&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.foundation.lazy.grid.items&#10;import com.example.noteflowproduction.Database.Note&#10;import com.example.noteflowproduction.NavigationSetup.Screen&#10;&#10;import com.example.noteflowproduction.ViewModels.NoteViewModel&#10;import java.sql.Date&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HomeScreen(navController: NavController,viewModel: NoteViewModel){&#10;&#10;    val notesList by viewModel.allNotes.collectAsState()&#10;&#10;    Scaffold(&#10;        modifier=Modifier.fillMaxSize(),&#10;        topBar = {&#10;            TopAppBar(&#10;                title={Text(text=&quot;NotesFlow&quot;,fontWeight=FontWeight.ExtraBold,fontSize=36.sp)},&#10;                modifier=Modifier.fillMaxSize()&#10;&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = {&#10;                    viewModelScope.launch {&#10;                        val newNote = Note(&#10;                            id = 0,&#10;                            folderId = 1,&#10;                            title = &quot;New Note&quot;,&#10;                            content = &quot;&quot;,&#10;                            createdDate = Date(System.currentTimeMillis()),&#10;                            modifiedDate = Date(System.currentTimeMillis())&#10;                        )&#10;                        viewModel.addNote(newNote)&#10;                        // Wait briefly for the note to be added, then get the latest note&#10;                        kotlinx.coroutines.delay(100)&#10;                        val allNotes = notesList&#10;                        if (allNotes.isNotEmpty()) {&#10;                            val latestNote = allNotes.last()&#10;                            navController.navigate(Screen.NoteDetailScreen.route + &quot;/${latestNote.id}&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            ) {&#10;                Icon(Icons.Default.Add, contentDescription = &quot;Add New Note&quot;)&#10;            }&#10;        }&#10;    ) { internalPadding-&gt;&#10;        LazyVerticalGrid(&#10;            modifier=Modifier.padding(internalPadding),&#10;            columns = GridCells.Fixed(2),&#10;            contentPadding= PaddingValues(8.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ){&#10;            items(notesList){ note-&gt;&#10;                NoteCardComponent(&#10;                    noteId = note.id,&#10;                    title = note.title,&#10;                    content = note.content,&#10;                    createdDate = note.createdDate,&#10;                    navigateToNoteDetail = { noteId -&gt;&#10;                        navController.navigate(Screen.NoteDetailScreen.route + &quot;/$noteId&quot;)&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/UserInterface/26_CardComponent.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/UserInterface/26_CardComponent.kt" />
              <option name="originalContent" value="package com.example.noteflowproduction.UserInterface&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.withStyle&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun NoteCardComponent(&#10;    title: String,&#10;    content: String,&#10;    image: String?,&#10;    createdDate: Date?,&#10;    navigateToNoteDetail: (noteId: Int) -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = {navigateToNoteDetail},&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(200.dp)&#10;            .padding(8.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;&#10;        Column(&#10;            modifier = Modifier.fillMaxSize(),&#10;            verticalArrangement = Arrangement.SpaceAround&#10;        ) {&#10;&#10;&#10;            Text(text = title, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;&#10;&#10;            Text(text = content, fontSize = 14.sp)&#10;&#10;&#10;            val formattedDate = if (createdDate != null) {&#10;                SimpleDateFormat(&quot;dd MMM yyyy, HH:mm&quot;, Locale.getDefault()).format(createdDate)&#10;            } else {&#10;                &quot;Unknown&quot;&#10;            }&#10;&#10;            val annotated = buildAnnotatedString {&#10;                withStyle(style = SpanStyle(fontWeight = FontWeight.SemiBold, fontSize = 12.sp)) {&#10;                    append(&quot;Created At: &quot;)&#10;                }&#10;                withStyle(style = SpanStyle(fontWeight = FontWeight.Normal, fontSize = 12.sp, color = Color.Gray)) {&#10;                    append(formattedDate)&#10;                }&#10;            }&#10;&#10;            Text(text = annotated)&#10;&#10;        }&#10;&#10;    }&#10;&#10;}" />
              <option name="updatedContent" value="package com.example.noteflowproduction.UserInterface&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.withStyle&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;@Composable&#10;fun NoteCardComponent(&#10;    noteId: Int,&#10;    title: String,&#10;    content: String,&#10;    createdDate: Date?,&#10;    navigateToNoteDetail: (noteId: Int) -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = { navigateToNoteDetail(noteId) },&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(200.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;&#10;        Column(&#10;            modifier = Modifier.fillMaxSize().padding(12.dp),&#10;            verticalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;&#10;&#10;            Text(text = title, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;&#10;&#10;            Text(&#10;                text = content,&#10;                fontSize = 14.sp,&#10;                maxLines = 4&#10;            )&#10;&#10;&#10;            val formattedDate = if (createdDate != null) {&#10;                SimpleDateFormat(&quot;dd MMM yyyy&quot;, Locale.getDefault()).format(createdDate)&#10;            } else {&#10;                &quot;Unknown&quot;&#10;            }&#10;&#10;            val annotated = buildAnnotatedString {&#10;                withStyle(style = SpanStyle(fontWeight = FontWeight.SemiBold, fontSize = 12.sp)) {&#10;                    append(&quot;Created: &quot;)&#10;                }&#10;                withStyle(style = SpanStyle(fontWeight = FontWeight.Normal, fontSize = 12.sp, color = Color.Gray)) {&#10;                    append(formattedDate)&#10;                }&#10;            }&#10;&#10;            Text(text = annotated)&#10;&#10;        }&#10;&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/UserInterface/27_NoteDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/UserInterface/27_NoteDetailScreen.kt" />
              <option name="originalContent" value="package com.example.noteflowproduction.UserInterface&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBackIosNew&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import com.example.noteflowproduction.NavigationSetup.Screen&#10;import com.example.noteflowproduction.ViewModels.NoteViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun NoteDetailScreen(noteId: Int,onNavigateBack:()-&gt; Unit,viewModel: NoteViewModel){&#10;    //shows the whole detail of the note&#10;&#10;    //I want a single note&#10;    //The selected note is&#10;&#10;    LaunchedEffect(noteId){&#10;        viewModel.getNoteById(noteId)&#10;    }&#10;&#10;    val selectedNote by viewModel.selectedNote.collectAsState()&#10;&#10;    Scaffold(&#10;        modifier=Modifier.fillMaxSize(),&#10;        topBar = {&#10;            TopAppBar(&#10;                title={Text(&quot;NotesFlow&quot;,fontSize=36.sp, fontWeight = FontWeight.ExtraBold)},&#10;                navigationIcon ={&#10;                    IconButton(&#10;                        onClick = onNavigateBack&#10;                    ){&#10;                        Icon(imageVector = Icons.Default.ArrowBackIosNew, contentDescription = &quot;Navigate back to the home screen&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ){internalPadding-&gt;&#10;        Column(&#10;            modifier=Modifier.padding(internalPadding).fillMaxSize().padding(16.dp)&#10;        ){&#10;            //Time&#10;            Text(&#10;                text=&quot;Created At: ${selectedNote?.createdDate}&quot;&#10;            )&#10;&#10;            Spacer(Modifier.height(15.dp))&#10;&#10;            TextField(&#10;                value = selectedNote?.title ?: &quot;&quot;,&#10;                onValueChange = { newTitle -&gt;&#10;                    selectedNote?.let { note -&gt; // we use let when we want to run code only when a nullable value is non null and get a non nullable local reference inside the block&#10;                        viewModel.updateNote(note.copy(title = newTitle))&#10;                    }&#10;                },&#10;                label = { Text(&quot;Title&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(Modifier.height(15.dp))&#10;&#10;            TextField(&#10;                value = selectedNote?.content ?: &quot;&quot;,&#10;                onValueChange = { newContent -&gt;&#10;                    selectedNote?.let { note -&gt;&#10;                        viewModel.updateNote(note.copy(content = newContent))&#10;                    }&#10;                },&#10;                label = { Text(&quot;Content&quot;) },&#10;                modifier = Modifier.fillMaxWidth().weight(1f)&#10;            )&#10;        }&#10;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.noteflowproduction.UserInterface&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBackIosNew&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Save&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import com.example.noteflowproduction.NavigationSetup.Screen&#10;import com.example.noteflowproduction.ViewModels.NoteViewModel&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;fun formatDate(date: java.sql.Date): String {&#10;    val formatter = SimpleDateFormat(&quot;MMM dd, yyyy hh:mm a&quot;, Locale.getDefault())&#10;    return formatter.format(date)&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun NoteDetailScreen(noteId: Int,onNavigateBack:()-&gt; Unit,viewModel: NoteViewModel){&#10;    //shows the whole detail of the note&#10;&#10;    //I want a single note&#10;    //The selected note is&#10;&#10;    LaunchedEffect(noteId){&#10;        viewModel.getNoteById(noteId)&#10;    }&#10;&#10;    val selectedNote by viewModel.selectedNote.collectAsState()&#10;&#10;    Scaffold(&#10;        modifier=Modifier.fillMaxSize(),&#10;        topBar = {&#10;            TopAppBar(&#10;                title={Text(&quot;NotesFlow&quot;,fontSize=36.sp, fontWeight = FontWeight.ExtraBold)},&#10;                navigationIcon ={&#10;                    IconButton(&#10;                        onClick = onNavigateBack&#10;                    ){&#10;                        Icon(imageVector = Icons.Default.ArrowBackIosNew, contentDescription = &quot;Navigate back to the home screen&quot;)&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(&#10;                        onClick = {&#10;                            selectedNote?.let { note -&gt;&#10;                                viewModel.deleteNote(note)&#10;                                onNavigateBack()&#10;                            }&#10;                        }&#10;                    ) {&#10;                        Icon(Icons.Default.Delete, contentDescription = &quot;Delete Note&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            FloatingActionButton(&#10;                onClick = {&#10;                    selectedNote?.let { note -&gt;&#10;                        viewModel.updateNote(note)&#10;                    }&#10;                }&#10;            ) {&#10;                Icon(Icons.Default.Save, contentDescription = &quot;Save Note&quot;)&#10;            }&#10;        }&#10;    ){internalPadding-&gt;&#10;        Column(&#10;            modifier=Modifier.padding(internalPadding).fillMaxSize().padding(16.dp)&#10;        ){&#10;            //Time&#10;            Text(&#10;                text=&quot;Created At: ${selectedNote?.createdDate?.let { formatDate(it) } ?: &quot;Unknown&quot;}&quot;&#10;            )&#10;&#10;            Spacer(Modifier.height(15.dp))&#10;&#10;            TextField(&#10;                value = selectedNote?.title ?: &quot;&quot;,&#10;                onValueChange = { newTitle -&gt;&#10;                    selectedNote?.let { note -&gt;&#10;                        viewModel.updateNote(note.copy(title = newTitle))&#10;                    }&#10;                },&#10;                label = { Text(&quot;Title&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(Modifier.height(15.dp))&#10;&#10;            TextField(&#10;                value = selectedNote?.content ?: &quot;&quot;,&#10;                onValueChange = { newContent -&gt;&#10;                    selectedNote?.let { note -&gt;&#10;                        viewModel.updateNote(note.copy(content = newContent))&#10;                    }&#10;                },&#10;                label = { Text(&quot;Content&quot;) },&#10;                modifier = Modifier.fillMaxWidth().weight(1f),&#10;                maxLines = Int.MAX_VALUE,&#10;                singleLine = false&#10;            )&#10;        }&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
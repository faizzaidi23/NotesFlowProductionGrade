<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/RepositoryImplementation/17_RemainderRepositoryImplementation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/RepositoryImplementation/17_RemainderRepositoryImplementation.kt" />
              <option name="originalContent" value="package com.example.noteflowproduction.RepositoryImplementation&#10;&#10;import com.example.noteflowproduction.Database.Note&#10;import com.example.noteflowproduction.Database.Reminder&#10;import com.example.noteflowproduction.Database.ReminderDao&#10;import com.example.noteflowproduction.Repositories.ReminderRepository&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class ReminderRepositoryImplementation(private val reminderDao: ReminderDao) : ReminderRepository {&#10;&#10;    //To get all the reminders&#10;    override fun getAllReminders(): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.showAllReminders()&#10;    }&#10;&#10;    //Add a reminder&#10;    override suspend fun addReminder(reminder: Reminder) {&#10;        reminderDao.addReminder(reminder = reminder)&#10;    }&#10;&#10;    //update a reminder&#10;    override suspend fun updateReminder(reminder: Reminder) {&#10;        reminderDao.updateReminder(reminder = reminder)&#10;    }&#10;&#10;    //delete a reminder&#10;    suspend fun deleteReminder(reminder:Reminder){&#10;        reminderDao.deleteReminder(reminder=reminder)&#10;    }&#10;&#10;    //get reminders for note&#10;    fun getReminderForNote(noteId:Int):Flow&lt;List&lt;Reminder&gt;&gt;{&#10;        return reminderDao.getRemindersForNote(noteId=noteId)&#10;    }&#10;&#10;    //get reminders for tag&#10;    fun getReminderForTag(tagId: Int):Flow&lt;List&lt;Reminder&gt;&gt;{&#10;        return reminderDao.getRemindersForTag(tagId = tagId)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.noteflowproduction.RepositoryImplementation&#10;&#10;import com.example.noteflowproduction.Database.Note&#10;import com.example.noteflowproduction.Database.Reminder&#10;import com.example.noteflowproduction.Database.ReminderDao&#10;import com.example.noteflowproduction.Repositories.ReminderRepository&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class ReminderRepositoryImplementation(private val reminderDao: ReminderDao) : ReminderRepository {&#10;&#10;    //To get all the reminders&#10;    override fun getAllReminders(): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.showAllReminders()&#10;    }&#10;&#10;    //Add a reminder&#10;    override suspend fun addReminder(reminder: Reminder) {&#10;        reminderDao.addReminder(reminder = reminder)&#10;    }&#10;&#10;    //update a reminder&#10;    override suspend fun updateReminder(reminder: Reminder) {&#10;        reminderDao.updateReminder(reminder = reminder)&#10;    }&#10;&#10;    //delete a reminder&#10;    override suspend fun deleteReminder(reminder: Reminder) {&#10;        reminderDao.deleteReminder(reminder = reminder)&#10;    }&#10;&#10;    //get reminders for note&#10;    override fun getRemindersForNote(noteId: Int): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.getRemindersForNote(noteId = noteId)&#10;    }&#10;&#10;    //get reminders for tag&#10;    override fun getRemindersForTag(tagId: Int): Flow&lt;List&lt;Reminder&gt;&gt; {&#10;        return reminderDao.getRemindersForTag(tagId = tagId)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/RepositoryImplementation/18_tagRepositoryImplementation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/noteflowproduction/RepositoryImplementation/18_tagRepositoryImplementation.kt" />
              <option name="originalContent" value="package com.example.noteflowproduction.RepositoryImplementation&#10;&#10;import com.example.noteflowproduction.Database.Tag&#10;import com.example.noteflowproduction.Database.TagDao&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class TagRepository(private val tagDao: TagDao){&#10;&#10;    //Get all tags&#10;    fun getAllTags():Flow&lt;List&lt;Tag&gt;&gt;{&#10;        return tagDao.getAllTags()&#10;    }&#10;&#10;    //Add a Tag&#10;    suspend fun addTag(tag: Tag){&#10;        tagDao.addTag(tag=tag)&#10;    }&#10;&#10;    //update a tag&#10;    suspend fun updateTag(tag: Tag){&#10;        tagDao.updateTag(tag=tag)&#10;    }&#10;&#10;    //delete a tag&#10;    suspend fun deleteTag(tag: Tag){&#10;        tagDao.deleteTag(tag=tag)&#10;    }&#10;&#10;    //get tags for note&#10;    fun getTagsForNote(noteId: Int){&#10;        tagDao.getTagsForNote(noteId = noteId)&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.noteflowproduction.RepositoryImplementation&#10;&#10;import com.example.noteflowproduction.Database.Note&#10;import com.example.noteflowproduction.Database.NoteDao&#10;import com.example.noteflowproduction.Database.Tag&#10;import com.example.noteflowproduction.Database.TagDao&#10;import com.example.noteflowproduction.Repositories.tagRepository&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class TagRepositoryImplementation(private val tagDao: TagDao, private val noteDao: NoteDao): tagRepository {&#10;&#10;    //Get all tags&#10;    override fun getAllTags():Flow&lt;List&lt;Tag&gt;&gt;{&#10;        return tagDao.getAllTags()&#10;    }&#10;&#10;    //Add a Tag&#10;    override suspend fun addTag(tagId: Tag){&#10;        tagDao.addTag(tag=tagId)&#10;    }&#10;&#10;    //update a tag&#10;    override suspend fun updateTag(tagId: Tag){&#10;        tagDao.updateTag(tag=tagId)&#10;    }&#10;&#10;    //delete a tag&#10;    override suspend fun deleteTag(tagId: Tag){&#10;        tagDao.deleteTag(tag=tagId)&#10;    }&#10;&#10;    //get all notes for a tag&#10;    override fun getAllNotesForTag(tagId: Int):Flow&lt;List&lt;Note&gt;&gt;{&#10;        return noteDao.getNotesForTag(tagId = tagId)&#10;    }&#10;&#10;    //get tags for note&#10;    override fun getAllTagsForNote(noteId: Int):Flow&lt;List&lt;Tag&gt;&gt;{&#10;        return tagDao.getTagsForNote(noteId = noteId)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>